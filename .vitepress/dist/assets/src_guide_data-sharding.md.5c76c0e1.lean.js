import{_ as s,v as a,b as n,R as l}from"./chunks/framework.cfa95d4c.js";const C=JSON.parse('{"title":"data sharding","description":"","frontmatter":{},"headers":[],"relativePath":"src/guide/data-sharding.md","filePath":"src/guide/data-sharding.md"}'),o={name:"src/guide/data-sharding.md"},p=l(`<h1 id="data-sharding" tabindex="-1">data sharding <a class="header-anchor" href="#data-sharding" aria-label="Permalink to &quot;data sharding&quot;">​</a></h1><p>When using Bluetooth for data transmission, sometimes due to the limitation of low-power Bluetooth data size, we may need to fragment the data for each transmission, otherwise problems may occur</p><h2 id="_1-fetchcallback" tabindex="-1">1. fetchCallback <a class="header-anchor" href="#_1-fetchcallback" aria-label="Permalink to &quot;1. fetchCallback&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> printease </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">printease</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fragmentSize </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dataBuffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">processBuffer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">theBuffer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">theBuffer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">byteLength</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">send data complete</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Here is just an example of sending Bluetooth data, please modify it according to your own situation.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeBLECharacteristicValue</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        deviceId</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">deviceId</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        serviceId</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">serviceId</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        characteristicId</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">characteristicId</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">theBuffer</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">success</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextChunk</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">processBuffer</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nextChunk</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">next</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">printease</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dataProcessing</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fetchCallback</span><span style="color:#A6ACCD;">(dataBuffer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fragmentSize</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> processBuffer)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>&quot;fragmentSize&quot; is the fragment size, it is recommended to set 20.</p><p><em><strong>writeBLECharacteristicValue</strong></em> is the method of sending data for you, you can modify it according to your own situation, here is just an example.</p>`,6),e=[p];function t(c,r,y,F,D,i){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{C as __pageData,d as default};
